service: bpm-backend-data
frameworkVersion: "2"
useDotenv: true

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-1
  memorySize: 2048
  environment:
    API_SECRET: ${env:API_SECRET}
    API_KEY: ${env:API_KEY}
    BUCKET: ${self:custom.bucketName}
    COIN_FILE_NAMES: ${env:COIN_FILE_NAMES}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.bucketName}"

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
  # MyBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #       Bucket: !Ref Bucket
  #       PolicyDocument:
  #         Statement:
  #           - Effect: Allow
  #             Principal: '*' # public access to access the bucket files 
  #             Action: s3:GetObject
  #             Resource: 'arn:aws:s3:::${self:custom.bucketName}/*'

functions:
  UpdateCoins:
    handler: update_coins.run_update
    name: updateCoins
    events:
      - schedule: 
          rate: cron(0 * * * ? *)
          enabled: ${env:ENABLE_SCHEDULER, false}
  UpdateUSDTPrices:
    handler: update_usdt.run_update
    name: updateUSDTPrices
    memorySize: 4096
    timeout: 900
    events: 
      - schedule: 
          rate: cron(15 * * * ? *)
          enabled: ${env:ENABLE_SCHEDULER, false}
  UpdateBTCPrices:
    handler: update_btc.run_update
    name: UpdateBTCPrices
    memorySize: 4096
    timeout: 900
    events: 
      - schedule: 
          rate: cron(30 * * * ? *)
          enabled: ${env:ENABLE_SCHEDULER, false}
  UpdateETHPrices:
    # spacing out all of the updates so that we don't hit the rate limit for the api
    handler: update_eth.run_update
    name: UpdateETHPrices
    memorySize: 4096
    timeout: 900
    events: 
      - schedule: 
          rate: cron(45 * * * ? *)
          enabled: ${env:ENABLE_SCHEDULER, false}
  
custom:
  bucketName: ${self:service}-${self:provider.stage}-assets
  pythonRequirements:
    dockerizePip: non-linux

plugins:
  # - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

package:
  patterns:
    - "!node_modules/**"
